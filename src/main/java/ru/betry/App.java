/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.betry;


import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;


import com.pengrad.telegrambot.request.GetFile;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.GetFileResponse;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;


public class App {


    public static void main(String[] args) throws IOException {

        Properties properties = new Properties();
        properties.load(new FileInputStream("app.properties"));
//           //ID   ѕользователь
        Map<Integer, User> users = new HashMap<>();

        TelegramBot bot = new TelegramBot(properties.getProperty("telegram_token"));
        bot.setUpdatesListener(updates -> {
            updates.forEach(System.out::println);

            updates.forEach(update -> {
                Integer userID = update.message().from().id();
                // проверка наличи€ логина и парол€
                if (!users.containsKey(userID)) {
                    bot.execute(new SendMessage(update.message().chat().id(),
                            "¬ам необходимо прислать логин и пароль в одной строке через пробел"));
                    users.put(userID, null);
                } else {
                    if (users.get(userID) == null) { // запись логина и парол€
                        String[] loginAndPassword = update.message().text().split(" ");
                        User user = new User(loginAndPassword[0], loginAndPassword[1]);
                        users.put(userID, user);
                        bot.execute(new SendMessage(update.message().chat().id(),
                                "¬се работает! “еперь вы можете присылать нам текст, изображение, геопозицию дл€ " +
                                        "»нстаграм (в одном сообщении)"));
                    } else if (update.message().photo().length > 0) {
                        System.out.println(update.toString());
                        Post post = new Post();
                        post.setTitle(update.message().text());
                        GetFileResponse fileResponse = bot.execute(new GetFile(update.message().photo()[0].fileId()));
                        String fullPath = bot.getFullFilePath(fileResponse.file());
                        System.out.println(fullPath);
                        try {
                            HttpDownload.downloadFile(fullPath, "./images", update.message().photo()[0].fileId() + ".jpg");

                        } catch (IOException e) {
                            System.err.println(e.getMessage());
                        }
                        post.setPhoto(new File("./images/" + update.message().photo()[0].fileId() + ".jpg").getPath());
                        users.get(userID).addPost(post);

                        System.out.println(users.toString());
                    }

                }
            });

            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }




}
